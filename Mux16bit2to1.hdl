/**
 * 16-bit 2to1 multiplexer
 * y[i] = s'.x0[i] + s.x1[i] for i=0...15
 **/

CHIP Mux16bit2to1 {
    IN x0[16],x1[16],s;
    OUT y[16];

    PARTS:
    Not(in=s,out=s1);

    And(a=s1,b=x0[0],out=p0);
    And(a=s,b=x1[0],out=q0);
    Or(a=p0,b=q0,out=y[0]);

    And(a=s1,b=x0[1],out=p1);
    And(a=s,b=x1[1],out=q1);
    Or(a=p1,b=q1,out=y[1]);

    And(a=s1,b=x0[2],out=p2);
    And(a=s,b=x1[2],out=q2);
    Or(a=p2,b=q2,out=y[2]);
 
    And(a=s1,b=x0[3],out=p3);
    And(a=s,b=x1[3],out=q3);
    Or(a=p3,b=q3,out=y[3]);

    And(a=s1,b=x0[4],out=p4);
    And(a=s,b=x1[4],out=q4);
    Or(a=p4,b=q4,out=y[4]);

    And(a=s1,b=x0[5],out=p5);
    And(a=s,b=x1[5],out=q5);
    Or(a=p5,b=q5,out=y[5]);

    And(a=s1,b=x0[6],out=p6);
    And(a=s,b=x1[6],out=q6);
    Or(a=p6,b=q6,out=y[6]);

    And(a=s1,b=x0[7],out=p7);
    And(a=s,b=x1[7],out=q7);
    Or(a=p7,b=q7,out=y[7]);

    And(a=s1,b=x0[8],out=p8);
    And(a=s,b=x1[8],out=q8);
    Or(a=p8,b=q8,out=y[8]);

    And(a=s1,b=x0[9],out=p9);
    And(a=s,b=x1[9],out=q9);
    Or(a=p9,b=q9,out=y[9]);

    And(a=s1,b=x0[10],out=p10);
    And(a=s,b=x1[10],out=q10);
    Or(a=p10,b=q10,out=y[10]);
 
    And(a=s1,b=x0[11],out=p11);
    And(a=s,b=x1[11],out=q11);
    Or(a=p11,b=q11,out=y[11]);

    And(a=s1,b=x0[12],out=p12);
    And(a=s,b=x1[12],out=q12);
    Or(a=p12,b=q12,out=y[12]);

    And(a=s1,b=x0[13],out=p13);
    And(a=s,b=x1[13],out=q13);
    Or(a=p13,b=q13,out=y[13]);

    And(a=s1,b=x0[14],out=p14);
    And(a=s,b=x1[14],out=q14);
    Or(a=p14,b=q14,out=y[14]);

    And(a=s1,b=x0[15],out=p15);
    And(a=s,b=x1[15],out=q15);
    Or(a=p15,b=q15,out=y[15]);
}
